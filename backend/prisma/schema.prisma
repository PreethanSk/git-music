// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())

  email String @unique
  username String @unique
  name String?
  password String

  projects Project[] @relation("UserProjects")
  collaborations Collaborator[]

  bio String?
  pfpUrl String?

  lastLogin DateTime?
  loginMethod LoginMethod?

  plan Plan @default(FREE)
  
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(uuid())
  name String
  description String?
  ownerId String
  owner User @relation(fields: [ownerId], references: [id], name: "UserProjects")
  commits  Commit[]
  branches Branch[]
  collaborators Collaborator[]
  pinned Boolean @default(false)
  isActive Boolean @default(true)
  public Boolean @default(false)
  lastCommitId String? @unique
  lastCommit Commit? @relation("ProjectLastCommit", fields: [lastCommitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id String @id @default(uuid())
  name String
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  commits Commit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commit{
  id String @id @default(uuid())
  name String
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  branchId String
  branch Branch @relation(fields: [branchId], references: [id])
  projectLastCommit Project? @relation("ProjectLastCommit")
  createdAt DateTime @default(now())
}

model Collaborator{
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  role CollaboratorRole @default(READ)
  addedAt DateTime @default(now())
}

enum CollaboratorRole{
  READ
  WRITE
  ADMIN
}
enum Plan{
  FREE
  PRO
  TEAM
}
enum LoginMethod{
  PASSWORD
  GOOGLE
  APPLE
  GITHUB
}